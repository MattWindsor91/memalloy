PPC
(* Multi-copy atomicity, applied to Power *)

include "basic_H.cat"
include "fr.cat"
      
let ctrlisync = ctrl & isync

(* Utilities *)
let dep = addr | data
let rdw = po-loc & (fre;rfe)
let detour = po-loc & (coe ; rfe)
let addrpo = addr;po


(*******)
(* ppo *)
(*******)

(* Initial value *)
let ci0 = ctrlisync | detour
let ii0 = dep | rfi | rdw
let cc0 = dep | po-loc | ctrl | addrpo
let ic0 = 0

(* Fixpoint from i -> c in instructions and transitivity *)
let rec ci = ci0 | (ci;ii) | (cc;ci)
and ii = ii0 | ci | (ic;ci) | (ii;ii)
and cc = cc0 | ci | (ci;ic) | (cc;cc)
and ic = ic0 | ii | cc | (ic;cc) | (ii ; ic) (* | ci inclus dans ii et cc *)

let ppoR = (R * R) & ii
let ppoW = (R * W) & ic
let ppo = ppoR | ppoW

(* Defining multicopy atomicity *)
acyclic po-loc | co as MCA_part1
let wo = (((rfe; ppo; rfe^-1) \ id); co)
       | (rfe; ppo; fr_init)    
acyclic wo as MCA_part2
