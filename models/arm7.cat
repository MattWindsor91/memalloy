(* 
This file is a slightly modified version of one that is distributed with 
the Herd tool, the licence of which is given below. The original file is
available online:
https://github.com/herd/herdtools/blob/master/herd/arm.cat
*)

(*********************************************************************)
(*                        Herd                                       *)
(*                                                                   *)
(* Luc Maranget, INRIA Paris-Rocquencourt, France.                   *)
(* Jade Alglave, University College London, UK.                      *)
(*                                                                   *)
(*  Copyright 2013 Institut National de Recherche en Informatique et *)
(*  en Automatique and the authors. All rights reserved.             *)
(*  This file is distributed  under the terms of the Lesser GNU      *)
(*  General Public License.                                          *)
(*********************************************************************)

"ARM7"
(* Model for ARM, ie with po-loc ommited from ppo *)

include "basic.cat"
let ctrlisync = ctrl; [ISB]; po
	  
(* Uniproc *)
acyclic po-loc | rf | fr | co as Uniproc

(* Utilities *)
let dep = addr | data
let rdw = po-loc & (fre;rfe)
let detour = po-loc & (coe ; rfe)
let addrpo = addr;po
#show rdw,detour,dep,addrpo
(*******)
(* ppo *)
(*******)


(* Initial value *)
let ci0 = ctrlisync | detour
let ii0 = dep | rfi | rdw
let cc0 = dep | ctrl | addrpo (* po-loc deleted *)
let ic0 = 0

(* Fixpoint from i -> c in instructions and transitivity *)
let rec ci = ci0 | (ci;ii) | (cc;ci)
and ii = ii0 | ci | (ic;ci) | (ii;ii)
and cc = cc0 | ci | (ci;ic) | (cc;cc)
and ic = ic0 | ii | cc | (ic;cc) | (ii ; ic) (* | ci inclus dans ii et cc *)

let ppo = RW(ic) | RR(ii)


(**********)
(* fences *)
(**********)

let dmbstREL = po; [DMB.ST]; po
let dsbstREL = po; [DSB.ST]; po
let dmbREL = po; [DMB]; po
let dsbREL = po; [DSB]; po

(* ARM *)
let dmbstW=WW(dmbstREL)
let dsbstW=WW(dsbstREL)
show dmbREL,dsbREL,dmbstW,dsbstW

(* Common, all arm barriers are strong *)
let strong = dmbREL|dsbREL|dmbstREL|dsbstREL
let light = 0

let fence = strong|light


(* happens before *)
let hb = ppo | fence | rfe
let GHB = hb

acyclic hb as ThinAir

(* prop *)
let hbstar = hb*
let propbase = (fence|(rfe;fence));hbstar

let chapo = rfe|fre|coe|(fre;rfe)|(coe;rfe)

let prop = WW(propbase)| (chapo? ; propbase*; strong; hbstar)

acyclic co|prop as Propagation
irreflexive fre;prop;hbstar as Causality

