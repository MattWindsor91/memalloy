(* 
This file is a slightly modified version of one that is distributed with 
the Herd tool, the licence of which is given below. The original file is
available online:
https://github.com/herd/herdtools/blob/master/herd/ppc.cat
*)

(*********************************************************************)
(*                        Herd                                       *)
(*                                                                   *)
(* Luc Maranget, INRIA Paris-Rocquencourt, France.                   *)
(* Jade Alglave, University College London, UK.                      *)
(*                                                                   *)
(*  Copyright 2013 Institut National de Recherche en Informatique et *)
(*  en Automatique and the authors. All rights reserved.             *)
(*  This file is distributed  under the terms of the Lesser GNU      *)
(*  General Public License.                                          *)
(*********************************************************************)

PPC
(* Model for Power *)

include "basic.cat"
let ctrlisync = ctrl; [isync]; po

(* Uniproc *)
acyclic po-loc | rf | fr | co as Uniproc

(* Utilities *)
let dep = addr | data
let rdw = po-loc & (fre;rfe)
let detour = po-loc & (coe ; rfe)
let addrpo = addr;po


(*******)
(* ppo *)
(*******)

(* Initial value *)
let ci0 = ctrlisync | detour
let ii0 = dep | rfi | rdw
let cc0 = dep | po-loc | ctrl | addrpo
let ic0 = 0

(* Fixpoint from i -> c in instructions and transitivity *)
let rec ci = ci0 | (ci;ii) | (cc;ci)
and ii = ii0 | ci | (ic;ci) | (ii;ii)
and cc = cc0 | ci | (ci;ic) | (cc;cc)
and ic = ic0 | ii | cc | (ic;cc) | (ii ; ic) (* | ci inclus dans ii et cc *)

let ppoR = RR(ii)
let ppoW = RW(ic)
let ppo = ppoR | ppoW
show ppo

(* fences *)
let syncREL=po;[sync];po
let lwsyncREL=WW(po;[lwsync];po)|RR(po;[lwsync];po)|RW(po;[lwsync];po)
let eieioREL=WW(po;[eieio];po)
show syncREL, lwsyncREL, eieioREL

(* All arm barriers are strong *)
let strong = syncREL
let light = lwsyncREL|eieioREL
let fence = strong|light

(* extensions *)
let ppoext = (rfe;ppo)|(ppo;rfe)|(rfe;ppo;rfe)
let fenceext = (rfe;fence)|(fence;rfe)|(rfe;fence;rfe)

(* happens before *)
let hb = ppo | ppoext | fence | fenceext
let GHB = hb
show GHB
acyclic hb as NoThinAir

(* prop *)
let hbstar = hb*
let propbase = (fence|fenceext);hbstar
show propbase

let chapo = rfe|fre|coe|(fre;rfe)|(coe;rfe)

let prop = WW(propbase)| (chapo? ; propbase*; strong; hbstar)

#show prop
acyclic co|prop as Propagation
irreflexive fre;prop;hbstar as Observation

let atomic = domain(atom) | range(atom)
let xx = po & (atomic * atomic)
acyclic co | xx as ScXX

empty (atom & (fre;coe)) as Atomic

